// NeNgine
//------------------------------------------------------------------------------
.NeNgineCorePath                    = 'src/core'

{
    .ProjectName                    = 'nengine'
    .ProjectPath                    = .NeNgineCorePath

    // Library
    //--------------------------------------------------------------------------
    .ProjectConfigs = {}
    ForEach( .BuildConfig in .BuildConfigs )
    {
        Using( .BuildConfig )
        .OutputBase + '\$Platform$-$BuildConfigName$'

        // Unity
        //--------------------------------------------------------------------------
        Unity( '$ProjectName$-Unity-$Platform$-$BuildConfigName$' )
        {
            .UnityInputPath             = '$ProjectPath$/'
            .UnityOutputPath            = '$OutputBase$/$ProjectPath$/'
            .UnityOutputPattern         = '$ProjectName$_Unity*.cpp'
            .UnityInputExcludePath      = '$ProjectPath$/test/' // Exclude Tests
        }

        // Library
        //--------------------------------------------------------------------------
        ObjectList( '$ProjectName$-Lib-$Platform$-$BuildConfigName$' )
        {
            .PreBuildDependencies       = {
                                            'shaderc-Lib-$Platform$-$BuildConfigName$-Build'
                                            'Glm-Lib-$Platform$-$BuildConfigName$-Build'
                                        }
            // Input
            .CompilerInputUnity         = '$ProjectName$-Unity-$Platform$-$BuildConfigName$'

            .CompilerOptions            + ' -I$GlmIncludePath$' // inlcude GLM

            // Output
            .CompilerOutputPath         = '$OutputBase$/$ProjectPath$/'
        }

        Alias( '$ProjectName$-$Platform$-$BuildConfigName$' ) { .Targets = '$ProjectName$-Lib-$Platform$-$BuildConfigName$' }
        ^'Targets_$Platform$_$BuildConfigName$' + { '$ProjectName$-$Platform$-$BuildConfigName$' }

        #if __WINDOWS__
            .ProjectConfig              = [ Using( .'Project_$Platform$_$BuildConfigName$' ) .Target = '$ProjectName$-$Platform$-$BuildConfigName$' ]
            ^ProjectConfigs             + .ProjectConfig
        #endif
        #if __OSX__
            .ProjectConfig              = [ .Config = '$BuildConfigName$'   .Target = '$ProjectName$-x64OSX-$BuildConfigName$' ]
            ^ProjectConfigs             + .ProjectConfig
        #endif
    }

    // Aliases
    //--------------------------------------------------------------------------
    CreateCommonAliases( .ProjectName )

    // Visual Studio Project Generation
    //--------------------------------------------------------------------------
    #if __WINDOWS__
        .ExtraOptions   = [
                            .ProjectInputPathsExclude = { '$ProjectPath$\test\' }
                          ]
        CreateVCXProject_Lib( .ProjectName, .ProjectPath, .ProjectConfigs, .ExtraOptions )
    #endif

    // XCode Project Generation
    //--------------------------------------------------------------------------
    #if __OSX__
        XCodeProject( '$ProjectName$-xcodeproj' )
        {
            .ProjectOutput              = '../tmp/XCode/Projects/2_Libs/$ProjectName$.xcodeproj/project.pbxproj'
            .ProjectInputPaths          = '$ProjectPath$/'
            .ProjectBasePath            = '$ProjectPath$/'

            .XCodeBuildWorkingDir       = '../../../src/'
        }
    #endif
}
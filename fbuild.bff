// NeNgine
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Includes
//------------------------------------------------------------------------------
// Platforms
#include "external/SDK/GCC/GCC.bff"
#include "external/SDK/Clang/Clang.bff"

// Helpers
#include "external/.FASTBuild/HelperFunctions.bff"

//------------------------------------------------------------------------------
// Settings
//------------------------------------------------------------------------------
Settings
{
    #if __WINDOWS__
        #import TMP
        .Environment    = { "PATH=$VS_PATH$;$WINDOWS_SDK_2019_PATH$",
                            "TMP=$TMP$",
                            "SystemRoot=C:\Windows" }
    #endif
}

//------------------------------------------------------------------------------
// Config Defines
//------------------------------------------------------------------------------
.Debug_Config =
[
    .CompilerOptions                = ' -DDEBUG -DPROFILING_ENABLED'

    .CompilerOptionsC               = .CompilerOptions

    .BuildConfigName                = 'Debug'

    #if !BUILDING_FROM_TESTS
        // Build writable files (Perforce "Open for edit") outside of Unity
        // to improve iteration times.
        // - Only in Debug as this impacts performance (inlining)
        // - Only when not building from tests (FASTBuild building itself)
        .UnityInputIsolateWritableFiles = true
        // Also not when building on CI (which builds from git).
        #if CI_BUILD
            .UnityInputIsolateWritableFiles = false
        #endif
    #endif
]
.Analyze_Config =
[
    .CompilerOptions                = ' -DDEBUG -DPROFILING_ENABLED -DANALYZE'
    .CompilerOptionsC               = .CompilerOptions
    .BuildConfigName                = 'Analyze'
]
.Profile_Config =
[
    .CompilerOptions                = ' -DRELEASE -DPROFILING_ENABLED'
    .CompilerOptionsC               = .CompilerOptions

    .BuildConfigName                = 'Profile'
]
.Release_Config =
[
    .CompilerOptions                = ' -DRELEASE'
    .CompilerOptionsC               = .CompilerOptions
    .CompilerOptionsDeoptimized     = .CompilerOptions

    .BuildConfigName                = 'Release'
]
.ASan_Config =
[
    .CompilerOptions                = ' -DRELEASE'
                                    + ' -fsanitize=address -fno-omit-frame-pointer'
    .CompilerOptionsC               = .CompilerOptions
    .LinkerOptions                  = ' -fsanitize=address'

    .BuildConfigName                = 'ASan'
]
.MSan_Config =
[
    .CompilerOptions                = ' -DRELEASE'
                                    + ' -fsanitize=memory -fsanitize-memory-track-origins -fno-omit-frame-pointer'
    .CompilerOptionsC               = .CompilerOptions
    .LinkerOptions                  = ' -fsanitize=memory -L../external/MSan'

    .BuildConfigName                = 'MSan'
]
.TSan_Config =
[
    .CompilerOptions                = ' -DRELEASE'
                                    + ' -fsanitize=thread'
    .CompilerOptionsC               = .CompilerOptions
    .CompilerOptionsPCH             = .CompilerOptions
    .LinkerOptions                  = ' -fsanitize=thread'

    .BuildConfigName                = 'TSan'
]
.Fuzzer_Config =
[
    .CompilerOptions                = ' -fsanitize=fuzzer-no-link'
    .CompilerOptionsC               = .CompilerOptions
]

//------------------------------------------------------------------------------
// Optimizations (MSVC)
//------------------------------------------------------------------------------
#if __WINDOWS__
    .Debug_Optimizations_MSVC =
    [
        .CompilerOptions                = ' /MTd /Od /RTC1 /GS /Oy- /GR-'
        .CompilerOptionsC               = .CompilerOptions
    ]
    .Analyze_Optimizations_MSVC =
    [
        Using( .Debug_Optimizations_MSVC )
        .CompilerOptions                + .StaticAnalysisOptions
        .CompilerOptionsC               = .CompilerOptions
    ]
    .Profile_Optimizations_MSVC =
    [
        .CompilerOptions                = ' /MT /Ox /Oy /Oi /GS- /GF /Gy /Gw /GR- /Zo'
        .CompilerOptionsC               = .CompilerOptions
        .LinkerOptions                  = ' /OPT:REF,ICF'
    ]
    .Release_Optimizations_MSVC =
    [
        Using( .Profile_Optimizations_MSVC )
        .CompilerOptionsDeoptimized     = .CompilerOptions
                                        - ' /Ox'
                                        + ' /Od'
    ]
#endif

//------------------------------------------------------------------------------
// Optimizations (Clang/GCC)
//------------------------------------------------------------------------------
.Debug_Optimizations =
[
    #if __WINDOWS__ // Using clang-cl.exe on Windows
        .CompilerOptions                = ' /Od'
    #else
        .CompilerOptions                = ' -O0'
    #endif
    .CompilerOptionsC               = .CompilerOptions
]
.Analyze_Optimizations =
[
    // TODO:B - Windows Clang Static Analysis config is incomplete
    Using( .Debug_Optimizations )
    .CompilerOptions                + ' --analyze'
    .CompilerOptionsC               = .CompilerOptions
]
.Profile_Optimizations =
[
    .CompilerOptions                = ' -O2'
                                    + ' -DNDEBUG'
    .CompilerOptionsC               = .CompilerOptions
]
.Release_Optimizations =
[
    Using( .Profile_Optimizations )
    .CompilerOptionsDeoptimized     = .CompilerOptions
                                    - ' -O2'
                                    + ' -O0'
                                    + ' -DNDEBUG'
]

// X64
//------------------------------------------------------------------------------
#if __WINDOWS__
    .X64BaseConfig              = .ToolChain_VS_Windows_X64
                                + .Windows10_SDK_X64
    .X64DebugConfig             = .X64BaseConfig
                                + .Debug_Config
                                + .Debug_Optimizations_MSVC
    .X64AnalyzeConfig           = .X64BaseConfig
                                + .Analyze_Config
                                + .Analyze_Optimizations_MSVC
    .X64ReleaseConfig           = .X64BaseConfig
                                + .Release_Config
                                + .Release_Optimizations_MSVC
    .X64ProfileConfig           = .X64BaseConfig
                                + .Profile_Config
                                + .Profile_Optimizations_MSVC
    .X64ASanConfig              = .X64BaseConfig
                                + .ASan_Config
                                + .Release_Optimizations_MSVC
    .X64TSanConfig              = .X64BaseConfig
                                + .TSan_Config
                                + .Release_Optimizations_MSVC
#endif

// X64 Clang
//------------------------------------------------------------------------------
#if __WINDOWS__
    .X64ClangBaseConfig         = .ToolChain_Clang_Windows
                                + .Windows10_SDK_X64_ClangCl
    .X64ClangDebugConfig        = .X64ClangBaseConfig
                                + .Debug_Config
                                + .Debug_Optimizations
    .X64ClangAnalyzeConfig      = .X64ClangBaseConfig
                                + .Analyze_Config
                                + .Analyze_Optimizations
    .X64ClangReleaseConfig      = .X64ClangBaseConfig
                                + .Release_Config
                                + .Release_Optimizations
    .X64ClangProfileConfig      = .X64ClangBaseConfig
                                + .Profile_Config
                                + .Profile_Optimizations
    .X64ClangASanConfig         = .X64ClangBaseConfig
                                + .ASan_Config
                                + .Release_Optimizations
    .X64ClangTSanConfig         = .X64ClangBaseConfig
                                + .TSan_Config
                                + .Release_Optimizations
#endif

// Linux
//------------------------------------------------------------------------------
#if __LINUX__
    .LinuxCompatibilityOptions =
    [
        .CommonCompilerOptions  = ' '
        .CompilerOptions        = .CommonCompilerOptions
        .CompilerOptionsC       = .CommonCompilerOptions
    ]

    // GCC
    .X64BaseConfig_Linux        = .LinuxCompatibilityOptions // Must be first
                                + .ToolChain_GCC_Linux
    .X64DebugConfig_Linux       = .X64BaseConfig_Linux
                                + .Debug_Config
                                + .Debug_Optimizations
    .X64ReleaseConfig_Linux     = .X64BaseConfig_Linux
                                + .Release_Config
                                + .Release_Optimizations
    .X64ProfileConfig_Linux     = .X64BaseConfig_Linux
                                + .Profile_Config
                                + .Profile_Optimizations
    .X64ASanConfig_Linux        = .X64BaseConfig_Linux
                                + .ASan_Config
                                + .Release_Optimizations
    .X64TSanConfig_Linux        = .X64BaseConfig_Linux
                                + .TSan_Config
                                + .Release_Optimizations
    // Clang
    .X64ClangBaseConfig_Linux   = .LinuxCompatibilityOptions // Must be first
                                + .ToolChain_Clang_Linux
    .X64ClangDebugConfig_Linux  = .X64ClangBaseConfig_Linux
                                + .Debug_Config
                                + .Debug_Optimizations
    .X64ClangReleaseConfig_Linux = .X64ClangBaseConfig_Linux
                                + .Release_Config
                                + .Release_Optimizations
    .X64ClangProfileConfig_Linux = .X64ClangBaseConfig_Linux
                                + .Profile_Config
                                + .Profile_Optimizations
    .X64ClangASanConfig_Linux   = .X64ClangBaseConfig_Linux
                                + .ASan_Config
                                + .Fuzzer_Config
                                + .Release_Optimizations
    .X64ClangMSanConfig_Linux   = .X64ClangBaseConfig_Linux
                                + .MSan_Config
                                + .Fuzzer_Config
                                + .Release_Optimizations
    .X64ClangTSanConfig_Linux   = .X64ClangBaseConfig_Linux
                                + .TSan_Config
                                + .Release_Optimizations
#endif

// OSX
//------------------------------------------------------------------------------
#if __OSX__
    .X64DebugConfig_OSX         = .ToolChain_Clang_OSX
                                + .Debug_Config
                                + .Debug_Optimizations
    .X64ReleaseConfig_OSX       = .ToolChain_Clang_OSX
                                + .Release_Config
                                + .Release_Optimizations
    .X64ProfileConfig_OSX       = .ToolChain_Clang_OSX
                                + .Profile_Config
                                + .Profile_Optimizations

    #if CLANG_SUPPORTS_ARMOSX
        .ARM64DebugConfig_OSX       = .ToolChain_Clang_ARMOSX
                                    + .Debug_Config
                                    + .Debug_Optimizations
        .ARM64ReleaseConfig_OSX     = .ToolChain_Clang_ARMOSX
                                    + .Release_Config
                                    + .Release_Optimizations
        .ARM64ProfileConfig_OSX     = .ToolChain_Clang_ARMOSX
                                    + .Profile_Config
                                    + .Profile_Optimizations
    #endif
#endif

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
.OutputBase = 'out'

//------------------------------------------------------------------------------
// VisualStudio Project Generation
//------------------------------------------------------------------------------
#if __WINDOWS__
    .ProjectCommon =
    [
        .ProjectBuildCommand        = 'cd ^$(SolutionDir)\..\..\src\ &amp; fbuild -vs -dist -monitor -cache ^$(ProjectName)-^$(Configuration)'
        .ProjectRebuildCommand      = 'cd ^$(SolutionDir)\..\..\src\ &amp; fbuild -vs -dist -monitor -cache -clean ^$(ProjectName)-^$(Configuration)'
        .OutputDirectory            = '^$(SolutionDir)\out'
        .IntermediateDirectory      = '^$(SolutionDir)\out'
        .BuildLogFile               = '^$(SolutionDir)\out\^$(ProjectName)-^$(Configuration).log'
        .Platform                   = 'x64'
        .PlatformToolset            = '$VS_PlatformToolset$'
    ]

    .Project_x64_Debug        = [ Using( .ProjectCommon ) .SolutionPlatform = 'x64'         .SolutionConfig = 'Debug'   .Config = '$SolutionPlatform$-$SolutionConfig$' ]
    .Project_x64_Analyze      = [ Using( .ProjectCommon ) .SolutionPlatform = 'x64'         .SolutionConfig = 'Analyze' .Config = '$SolutionPlatform$-$SolutionConfig$' ]
    .Project_x64_Profile      = [ Using( .ProjectCommon ) .SolutionPlatform = 'x64'         .SolutionConfig = 'Profile' .Config = '$SolutionPlatform$-$SolutionConfig$' ]
    .Project_x64_Release      = [ Using( .ProjectCommon ) .SolutionPlatform = 'x64'         .SolutionConfig = 'Release' .Config = '$SolutionPlatform$-$SolutionConfig$' ]
    .Project_x64_ASan         = [ Using( .ProjectCommon ) .SolutionPlatform = 'x64'         .SolutionConfig = 'ASan'    .Config = '$SolutionPlatform$-$SolutionConfig$' ]
    .Project_x64_TSan         = [ Using( .ProjectCommon ) .SolutionPlatform = 'x64'         .SolutionConfig = 'TSan'    .Config = '$SolutionPlatform$-$SolutionConfig$' ]
    .Project_x64Clang_Debug   = [ Using( .ProjectCommon ) .SolutionPlatform = 'x64Clang'    .SolutionConfig = 'Debug'   .Config = '$SolutionPlatform$-$SolutionConfig$' ]
    .Project_x64Clang_Analyze = [ Using( .ProjectCommon ) .SolutionPlatform = 'x64Clang'    .SolutionConfig = 'Analyze' .Config = '$SolutionPlatform$-$SolutionConfig$' ]
    .Project_x64Clang_Profile = [ Using( .ProjectCommon ) .SolutionPlatform = 'x64Clang'    .SolutionConfig = 'Profile' .Config = '$SolutionPlatform$-$SolutionConfig$' ]
    .Project_x64Clang_Release = [ Using( .ProjectCommon ) .SolutionPlatform = 'x64Clang'    .SolutionConfig = 'Release' .Config = '$SolutionPlatform$-$SolutionConfig$' ]
    .Project_x64Clang_ASan    = [ Using( .ProjectCommon ) .SolutionPlatform = 'x64Clang'    .SolutionConfig = 'ASan'    .Config = '$SolutionPlatform$-$SolutionConfig$' ]
    .Project_x64Clang_TSan    = [ Using( .ProjectCommon ) .SolutionPlatform = 'x64Clang'    .SolutionConfig = 'TSan'    .Config = '$SolutionPlatform$-$SolutionConfig$' ]
#endif

// Configurations
//------------------------------------------------------------------------------
#if __WINDOWS__
    .BuildConfigs               = { .X64DebugConfig, .X64AnalyzeConfig, .X64ProfileConfig, .X64ReleaseConfig
                                    .X64ASanConfig, .X64TSanConfig
                                    .X64ClangDebugConfig, .X64ClangAnalyzeConfig, .X64ClangProfileConfig, .X64ClangReleaseConfig
                                    .X64ClangASanConfig, .X64ClangTSanConfig }
#endif
#if __LINUX__
    .BuildConfigs               = { .X64DebugConfig_Linux, .X64ProfileConfig_Linux, .X64ReleaseConfig_Linux,
                                    .X64ASanConfig_Linux, .X64TSanConfig_Linux,
                                    .X64ClangDebugConfig_Linux, .X64ClangProfileConfig_Linux, .X64ClangReleaseConfig_Linux,
                                    .X64ClangASanConfig_Linux, .X64ClangMSanConfig_Linux, .X64ClangTSanConfig_Linux }
#endif
#if __OSX__
    .BuildConfigs               = { .X64DebugConfig_OSX, .X64ProfileConfig_OSX, .X64ReleaseConfig_OSX }
    #if CLANG_SUPPORTS_ARMOSX
                                + { .ARM64DebugConfig_OSX, .ARM64ProfileConfig_OSX, .ARM64ReleaseConfig_OSX }
    #endif
#endif

.Targets_x64_Debug = {}
.Targets_x64_Analyze = {}
.Targets_x64_Profile = {}
.Targets_x64_Release = {}
.Targets_x64_ASan = {}
.Targets_x64_TSan = {}
.Targets_x64Clang_Debug = {}
.Targets_x64Clang_Analyze = {}
.Targets_x64Clang_Profile = {}
.Targets_x64Clang_Release = {}
.Targets_x64Clang_ASan = {}
.Targets_x64Clang_TSan = {}

.Targets_x64Linux_Debug = {}
.Targets_x64Linux_Profile = {}
.Targets_x64Linux_Release = {}
.Targets_x64Linux_ASan = {}
.Targets_x64Linux_TSan = {}
.Targets_x64ClangLinux_Debug = {}
.Targets_x64ClangLinux_Profile = {}
.Targets_x64ClangLinux_Release = {}
.Targets_x64ClangLinux_ASan = {}
.Targets_x64ClangLinux_MSan = {}
.Targets_x64ClangLinux_TSan = {}

.Targets_x64OSX_Debug = {}
.Targets_x64OSX_Profile = {}
.Targets_x64OSX_Release = {}
#if CLANG_SUPPORTS_ARMOSX
    .Targets_ARMOSX_Debug = {}
    .Targets_ARMOSX_Profile = {}
    .Targets_ARMOSX_Release = {}
    .Targets_OSX_Debug = {}
    .Targets_OSX_Profile = {}
    .Targets_OSX_Release = {}
#endif

// External dependencies
#include "external/SDK/googletest/googletest.bff"
#include "external/SDK/glfw/glfw.bff"
#include "external/SDK/glm/glm.bff"

// NeNgine Core
#include "src/core/nengine.bff"
#include "src/app/nengine-app.bff"

// NeNgine Tests
#include "src/test/nengine-test.bff"

// Aliases : All-$Platform$-$Config$
//------------------------------------------------------------------------------
ForEach( .BuildConfig in .BuildConfigs )
{
    Using( .BuildConfig )

    Alias( 'All-$Platform$-$BuildConfigName$' ) { .Targets = .'Targets_$Platform$_$BuildConfigName$' }

    // Create additional Universal targets
    #if CLANG_SUPPORTS_ARMOSX
        If( .Platform == 'ARMOSX' )
        {
            Alias( 'All-OSX-$BuildConfigName$' ) { .Targets = .'Targets_OSX_$BuildConfigName$' }
        }
    #endif
}

// Exes
//------------------------------------------------------------------------------
Alias( 'Exes' )
{
    .Targets    = { 'nengine-Debug',        'nengine-Profile',      'nengine-Release'
                    'nengine-test-Debug',   'nengine-test-Profile', 'nengine-test-Release' }
}

// Aliases : All-$Platform$
//------------------------------------------------------------------------------
.Platforms =
{
    'x64',
    'x64Clang',
    'x64Linux',
    'x64ClangLinux',
    'x64OSX'
    #if CLANG_SUPPORTS_ARMOSX
        'ARMOSX'
        'OSX'
    #endif
}
.PlatformConfigs_x64           = { 'Debug', 'Analyze', 'Profile', 'Release', 'ASan', 'TSan' }
.PlatformConfigs_x64Clang      = { 'Debug', 'Analyze', 'Profile', 'Release', 'ASan', 'TSan' }
.PlatformConfigs_x64Linux      = { 'Debug', 'Profile', 'Release', 'ASan', 'TSan' }
.PlatformConfigs_x64ClangLinux = { 'Debug', 'Profile', 'Release', 'ASan'}//, 'MSan', 'TSan' }
.PlatformConfigs_x64OSX        = { 'Debug', 'Profile', 'Release' }
#if CLANG_SUPPORTS_ARMOSX
    .PlatformConfigs_ARMOSX         = { 'Debug', 'Profile', 'Release' }
    .PlatformConfigs_OSX            = { 'Debug', 'Profile', 'Release' }
#endif
ForEach( .Platform in .Platforms )
{
    Alias( 'All-$Platform$' )
    {
        .Targets = {}
        ForEach( .Config in .'PlatformConfigs_$Platform$' )
        {
            // TODO:B Exclude windows configs that don't work yet
            // x64Clang Analyze config - not working yet
            // x64Clang ASan config - not working yet
            // x64Clang TSan config - not working yet (not supported by Clang on Windows)
            // x64 ASan config - not working yet
            // x64 TSan config - not working yet (not supported by MSVC on Windows)
            If( !( ( .Platform == 'x64Clang' ) && ( .Config == 'Analyze' ) ) &&
                !( ( .Platform == 'x64Clang' ) && ( .Config == 'ASan' ) ) &&
                !( ( .Platform == 'x64Clang' ) && ( .Config == 'TSan' ) ) &&
                !( ( .Platform == 'x64' ) && ( .Config == 'ASan' ) ) &&
                !( ( .Platform == 'x64' ) && ( .Config == 'TSan' ) ) )
            {
                ^Targets + { 'All-$Platform$-$Config$' }
            }
        }
    }
}

// Aliases : All
//------------------------------------------------------------------------------
#if __WINDOWS__
    Alias( 'All' )
    {
        .Targets        = { 'All-x64Clang',
                            'All-x64'
                          }
    }
#endif
#if __OSX__
    Alias( 'All' )
    {
        #if CLANG_SUPPORTS_ARMOSX
            .Targets        = { 'All-OSX' }     // X64, ARM & Universal
        #else
            .Targets        = { 'All-x64OSX' }  // X64 only
        #endif
    }
#endif
#if __LINUX__
    Alias( 'All' )
    {
        .Targets        = { 'All-x64Linux',
                            'All-x64ClangLinux'
                          }
    }
#endif

// Aliases : Tests
//------------------------------------------------------------------------------
#if __WINDOWS__
    Alias( 'Tests' )
    {
        .Targets        = { 'nengine-test-x64-Debug'
                          }
    }
#endif
#if __OSX__
    Alias( 'Tests' )
    {
        #if __ARM64__
            .Targets        = { 'nengine-test-ARMOSX-Debug'
                              }
        #else
            .Targets        = { 'nengine-test-x64OSX-Debug'
                              }
        #endif
    }
#endif
#if __LINUX__
    Alias( 'Tests' )
    {
        .Targets        = { 'nengine-test-x64Linux-Debug'
                          }
    }
#endif

// Aliases : All+Tests
//------------------------------------------------------------------------------
Alias( 'All+Tests' )
{
    .Targets        = { 'All', 'Tests' }
}

// Visual Studio Solution
//------------------------------------------------------------------------------
#if __WINDOWS__
    // 'All' - Compile everything
    {
        .ExtraOptions   = [ .ProjectInputPaths = {} ]
        .ProjectConfigs = {}
        ForEach( .BuildConfig in .BuildConfigs )
        {
            Using( .BuildConfig )
            .ProjectConfig          = [ Using( .'Project_$Platform$_$BuildConfigName$' ) .Target = 'All-$Platform$-$BuildConfigName$' ]
            ^ProjectConfigs         + .ProjectConfig
        }
        CreateVCXProject_Lib( 'All', '/', .ProjectConfigs, .ExtraOptions )
    }

    // 'SDKs' - Browse Platform/Compiler SDKs
    {
        .ExtraOptions   = [ .ProjectAllowedFileExtensions = '*.bff' ]
        .ProjectConfigs = {}
        ForEach( .BuildConfig in .BuildConfigs )
        {
            Using( .BuildConfig )
            .ProjectConfig          = [ Using( .'Project_$Platform$_$BuildConfigName$' ) ]
            ^ProjectConfigs         + .ProjectConfig
        }
        CreateVCXProject_Lib( 'SDKs', '../External/SDK/', .ProjectConfigs, .ExtraOptions )
    }

    // 'Scripts' - Helper scripts
    {
        .ExtraOptions   = [ .ProjectAllowedFileExtensions = '*.py' ]
        .ProjectConfigs = {}
        ForEach( .BuildConfig in .BuildConfigs )
        {
            Using( .BuildConfig )
            .ProjectConfig          = [ Using( .'Project_$Platform$_$BuildConfigName$' ) ]
            ^ProjectConfigs         + .ProjectConfig
        }
        CreateVCXProject_Lib( 'Scripts', '../Scripts/', .ProjectConfigs, .ExtraOptions )
    }

    // 'UpdateSolution' - Regenerate projects/solutions
    {
        .ExtraOptions   = [ .ProjectInputPaths = {} ]
        .ProjectConfigs = {}
        ForEach( .BuildConfig in .BuildConfigs )
        {
            Using( .BuildConfig )
            .ProjectConfig          = [
                                        Using( .'Project_$Platform$_$BuildConfigName$' )
                                        .ProjectBuildCommand    = 'cd ^$(SolutionDir)\..\..\src\ &amp; fbuild solution -vs'
                                        .ProjectRebuildCommand  = 'cd ^$(SolutionDir)\..\..\src\ &amp; fbuild solution -vs -clean'
                                      ]
            ^ProjectConfigs         + .ProjectConfig
        }
        CreateVCXProject_Lib( 'UpdateSolution', '/', .ProjectConfigs, .ExtraOptions )
    }

    VSSolution( 'solution' )
    {
        .SolutionOutput     = '../tmp/VisualStudio/FASTBuild.sln'
        .SolutionProjects   = { 'All-proj',
                                'UpdateSolution-proj',
                              }
        .SolutionBuildProject = 'All-proj'
        .SolutionConfigs = {}
        ForEach( .BuildConfig in .BuildConfigs )
        {
            Using( .BuildConfig )
            .SolutionConfig         = [ Using( .'Project_$Platform$_$BuildConfigName$' ) ]
            ^SolutionConfigs        + .SolutionConfig

            // For each Windows x64 config add a Windows Subsystem for Linux (WSL) equivalent
            .WSLConfig =
            [
                Using( .SolutionConfig )
                .SolutionPlatform   = 'ClangLinux'
                .Config             = '$SolutionPlatform$-$SolutionConfig$'
            ]
            ^SolutionConfigs        + .WSLConfig
        }

        .SolutionVisualStudioVersion = '$VS_SolutionVersion$'

        // Work around for Visual Studio F5 behaviour up-to-date check
        .Deps               = [
                                .Projects = { 'nengine-test-proj', 'nengine-proj' }
                                .Dependencies = { 'All-proj' }
                              ]
        .SolutionDependencies = { .Deps }

        .Folder_Config =
        [
            .Path           = 'Config'
            .Items          = {
                                'fbuild.bff'
                                '.FASTBuild/HelperFunctions.bff'
                              }
        ]
        .Folder_External =
        [
            .Path           = 'External'
            .Projects       = { 'googletest-proj' }
        ]
        .Folder_Test =
        [
            .Path           = 'Test'
            .Projects       = { 'nengine-test-proj'}
        ]
        .Folder_Libs =
        [
            .Path           = 'Libs'
            .Projects       = { 'nengine-proj' }
        ]
        .Folder_Apps =
        [
            .Path           = 'Apps'
            .Projects       = { 'game-proj' }
        ]
        .SolutionFolders    = { .Folder_Config, .Folder_External, .Folder_Test, .Folder_Libs, .Folder_Apps }
    }
#endif

//------------------------------------------------------------------------------
// XCode Project Generation
//------------------------------------------------------------------------------
#if __OSX__
    XCodeProject( 'xcode' )
    {
        .ProjectOutput              = '../tmp/XCode/FASTBuild.xcodeproj/project.pbxproj'
        .ProjectBasePath            = '../tmp/XCode/Projects/'

        .XCodeBuildWorkingDir       = '../../../Code/'

        .ProjectFiles               = { 'nengine-xcodeproj'
                                        'nengine-test-xcodeproj'
                                        'game-xcodeproj'
                                        'googletest-xcodeproj'
                                      }
        .ProjectConfigs = {}
        ForEach( .BuildConfig in .BuildConfigs )
        {
            Using( .BuildConfig )
            .ProjectConfig          = [ .Config = '$BuildConfigName$' .Target = 'All-x64OSX-$BuildConfigName$' ]
            ^ProjectConfigs         + .ProjectConfig
        }
    }
#endif

//------------------------------------------------------------------------------
